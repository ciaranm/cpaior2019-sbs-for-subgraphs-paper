SHELL := /bin/bash
FILTER := -1
MODULUS := 1
INSTANCES_FILE := instances.txt
CATTER := cat
INSTANCES := $(shell cat $(INSTANCES_FILE) | $(CATTER) | cut -d' ' -f1 | if [[ $(FILTER) == -1 ]] ; then cat ; else awk "(NR % $(MODULUS)) == ($(FILTER) % $(MODULUS))" ; fi)
GLASGOW_ALGORITHMS := \
    sequentialinduced13 \
    sequentialinputordersoftmaxinduced13 \
    sequentialshuffleinduced13 \
    sequentialantiheuristicinduced13 \
    sequentialinputordersoftmaxrestartsinduced13 \
    sequentialrestartsshuffleinduced13

LAD_ALGORITHMS := pathladinduced
VF2_ALGORITHMS := vf2induced vf3induced
RI_ALGORITHMS := riinduced
GLASGOWLION_ALGORITHMS :=
MCSPLIT_ALGORITHMS := # non_ind_mcsp_2paths anti_non_ind_mcsp_2paths
ALL_ALGORITHMS := $(GLASGOW_ALGORITHMS) $(MCSPLIT_ALGORITHMS) $(LAD_ALGORITHMS) $(VF2_ALGORITHMS) $(RI_ALGORITHMS) $(GLASGOWLION_ALGORITHMS)
RESULTS := results

all : $(RESULTS)/inducedruntimes.data $(RESULTS)/inducedsearchtimes.data $(RESULTS)/inducedsearchsizes.data

$(RESULTS)/inducedruntimes.data :
	{ \
	    echo instance family sat $(ALL_ALGORITHMS) ; \
	    $(CATTER) $(INSTANCES_FILE) | if [[ $(FILTER) == -1 ]] ; then cat ; else awk "(NR % $(MODULUS)) == ($(FILTER) % $(MODULUS))" ; fi | while read i p t f ; do \
	        echo $$i $$f $$(cat $(RESULTS)/statsinduced/$$i.sat || echo XXX ) $$(for a in $(ALL_ALGORITHMS) ; do cat $(RESULTS)/statsinduced/$$i.runtime.$$a || echo XXX ; done ) ; \
	    done ; \
	} | tee $@

$(RESULTS)/inducedsearchtimes.data :
	{ \
	    echo instance family sat $(GLASGOW_ALGORITHMS) ; \
	    $(CATTER) $(INSTANCES_FILE) | if [[ $(FILTER) == -1 ]] ; then cat ; else awk "(NR % $(MODULUS)) == ($(FILTER) % $(MODULUS))" ; fi | while read i p t f ; do \
	        echo $$i $$f $$(cat $(RESULTS)/statsinduced/$$i.sat || echo XXX ) $$(for a in $(GLASGOW_ALGORITHMS) ; do cat $(RESULTS)/statsinduced/$$i.searchtime.$$a || echo XXX ; done ) ; \
	    done ; \
	} | tee $@

$(RESULTS)/inducedsearchsizes.data :
	{ \
	    echo instance family sat $(GLASGOW_ALGORITHMS) ; \
	    $(CATTER) $(INSTANCES_FILE) | if [[ $(FILTER) == -1 ]] ; then cat ; else awk "(NR % $(MODULUS)) == ($(FILTER) % $(MODULUS))" ; fi | while read i p t f ; do \
	        echo $$i $$f $$(cat $(RESULTS)/statsinduced/$$i.sat || echo XXX ) $$(for a in $(GLASGOW_ALGORITHMS) ; do cat $(RESULTS)/statsinduced/$$i.searchsize.$$a || echo XXX ; done ) ; \
	    done ; \
	} | tee $@
