SHELL := /bin/bash
FILTER := -1
MODULUS := 1
CATTER := cat
INSTANCES_FILE := instances.txt
INSTANCES := $(shell cat $(INSTANCES_FILE) | $(CATTER) | cut -d' ' -f1 | if [[ $(FILTER) == -1 ]] ; then cat ; else awk "(NR % $(MODULUS)) == ($(FILTER) % $(MODULUS))" ; fi)
TIMEOUT := 1000
ALGORITHMS := \
    glasgowbiasedthreads36v1 \
    glasgowbiasedconstant5400threads36v1 \
    glasgowbiasedconstant5400triggeredthreads36v1 \
    glasgowbiasedthreads36v2 \
    glasgowbiasedconstant5400threads36v2 \
    glasgowbiasedconstant5400triggeredthreads36v2 \

STACK_SPACE := 10485760
RESULTS := results

all : $(foreach i, $(INSTANCES), $(foreach a, $(ALGORITHMS), $(RESULTS)/$(a)/$i.out ))

dir-% :
	mkdir -p $(RESULTS) $(RESULTS)/$*

define ALGORITHM_template
$(RESULTS)/$(1)/%.out : | dir-$(1)
	ulimit -s $$(STACK_SPACE) ; ../glasgow/solve_subgraph_isomorphism \
	    $$$$(if echo $(1) | grep -q degree ; then echo --value-ordering=degree ; fi ) \
	    $$$$(if echo $(1) | grep -q anti; then echo --value-ordering=antidegree ; fi ) \
	    $$$$(if echo $(1) | grep -q random ; then echo --value-ordering=random ; fi ) \
	    $$$$(if echo $(1) | grep -q biased ; then echo --value-ordering=biased ; fi ) \
	    $$$$(if echo $(1) | grep -q nonogoods ; then echo --nogood-size-limit=0 ; fi ) \
	    $$$$(if echo $(1) | grep -q norestarts ; then echo --restarts-constant=0 ; fi ) \
	    $$$$(if echo $(1) | grep -q dds ; then echo --dds ; fi ) \
	    $$$$(if echo $(1) | grep -q induced ; then echo --induced ; fi ) \
	    $$$$(if echo $(1) | grep -q constant ; then echo --geometric-restarts=1.0 --restarts-constant=$$$$(echo $(1) | sed -e 's,.*constant\([1234567890]\+\).*,\1,' ) ; fi ) \
	    $$$$(if echo $(1) | grep -q triggered ; then echo --triggered-restarts ; fi ) \
	    $$$$(if echo $(1) | grep -q threads ; then echo --threads=$$$$(echo $(1) | sed -e 's,.*threads\([1234567890]\+\).*,\1,' ) ; fi ) \
	    --timeout $$(TIMEOUT) \
	    --format lad \
	    $$(shell grep "^`basename $$*` " < instances.txt | cut -d' ' -f2-3 ) > >(tee $$@ )
endef

$(foreach a,$(ALGORITHMS),$(eval $(call ALGORITHM_template,$(a))))

