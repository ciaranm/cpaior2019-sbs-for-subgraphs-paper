SHELL := /bin/bash
FILTER := -1
MODULUS := 1
CATTER := cat
INSTANCES_FILE := instances.txt
INSTANCES := $(shell cat $(INSTANCES_FILE) | $(CATTER) | cut -d' ' -f1 | if [[ $(FILTER) == -1 ]] ; then cat ; else awk "(NR % $(MODULUS)) == ($(FILTER) % $(MODULUS))" ; fi)
TIMEOUT := 1000
ALGORITHMS := \
    sequential13 \
    sequentialinputordersoftmax13 \
    sequentialshuffle13 \
    sequentialantiheuristic13 \
    sequentialinputordersoftmaxrestarts13 \
    sequentialrestartsshuffle13 \
    sequentialrestartsshufflegoods13 \
    sequentialdds13 \
    sequentialinduced13 \
    sequentialinputordersoftmaxinduced13 \
    sequentialshuffleinduced13 \
    sequentialantiheuristicinduced13 \
    sequentialinputordersoftmaxrestartsinduced13 \
    sequentialrestartsshuffleinduced13

STACK_SPACE := 10485760
RESULTS := results

all : $(foreach i, $(INSTANCES), $(foreach a, $(ALGORITHMS), $(RESULTS)/$(a)/$i.out ))

dir-% :
	mkdir -p $(RESULTS) $(RESULTS)/$*

define ALGORITHM_template
$(RESULTS)/$(1)/%.out : | dir-$(1)
	ulimit -s $$(STACK_SPACE) ; ../code/solve_subgraph_isomorphism \
	    $$$$(echo customisable-$(1) | sed -e 's,restarts,,' -e 's,shuffle,,' -e 's,biased,,' -e 's,softmax,,' -e 's,position,,' \
	        -e 's,antiheuristic,,' -e 's,tiebreaking,,' -e 's,inputorder,,' -e 's,goods,,' -e 's,geometric,,' -e 's,constant,,' \
		-e 's,ten,,' -e 's,hundred,,' -e 's,thousand,,' -e 's,basetwo,,' -e 's,basethree,,' -e 's,baseonepointfive,,' \
		-e 's,var,,' -e 's,magic,,' -e 's,ddd*s,,' -e 's,induced,,' -e 's,[1234567890]\+,,' ) \
	    $$$$(if echo $(1) | grep -q restarts ; then echo --restarts ; fi ) \
	    $$$$(if echo $(1) | grep -q shuffle ; then echo --shuffle ; fi ) \
	    $$$$(if echo $(1) | grep -q biased ; then echo --biased-shuffle ; fi ) \
	    $$$$(if echo $(1) | grep -q softmax ; then echo --softmax-shuffle ; fi ) \
	    $$$$(if echo $(1) | grep -q magic ; then echo --magic-shuffle ; fi ) \
	    $$$$(if echo $(1) | grep -q position ; then echo --position-shuffle ; fi ) \
	    $$$$(if echo $(1) | grep -q antiheuristic ; then echo --antiheuristic ; fi ) \
	    $$$$(if echo $(1) | grep -q tiebreaking ; then echo --tiebreaking ; fi ) \
	    $$$$(if echo $(1) | grep -q inputorder ; then echo --input-order ; fi ) \
	    $$$$(if echo $(1) | grep -q goods ; then echo --goods ; fi ) \
	    $$$$(if echo $(1) | grep -q geometric ; then echo --geometric-multiplier=1.1 ; fi ) \
	    $$$$(if echo $(1) | grep -q constant ; then echo --geometric-multiplier=1.0 --geometric-start=1000 ; fi ) \
	    $$$$(if echo $(1) | grep -q ten ; then echo --luby-multiplier=10 ; fi ) \
	    $$$$(if echo $(1) | grep -q hundred ; then echo --luby-multiplier=100 ; fi ) \
	    $$$$(if echo $(1) | grep -q thousand ; then echo --luby-multiplier=1000 ; fi ) \
	    $$$$(if echo $(1) | grep -q basetwo ; then echo --softmax-base=2 ; fi ) \
	    $$$$(if echo $(1) | grep -q basethree ; then echo --softmax-base=3 ; fi ) \
	    $$$$(if echo $(1) | grep -q baseonepointfive ; then echo --softmax-base=1.5 ; fi ) \
	    $$$$(if echo $(1) | grep -q var ; then echo --biased-variable-ordering ; fi ) \
	    $$$$(if echo $(1) | grep -q dds ; then echo --dds ; fi ) \
	    $$$$(if echo $(1) | grep -q ddds ; then echo --ddds ; fi ) \
	    $$$$(if echo $(1) | grep -q induced ; then echo --induced ; fi ) \
	    --timeout $$(TIMEOUT) \
	    $$(shell grep "^`basename $$*` " < instances.txt | cut -d' ' -f2-3 ) > >(tee $$@ )
endef

$(foreach a,$(ALGORITHMS),$(eval $(call ALGORITHM_template,$(a))))

